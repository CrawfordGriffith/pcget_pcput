                        ;
                        ;  Alspa ACI-2 version, 4 MHz Z80
                        ;
                        ;  PCGET - This CP/M program receives a file from a PC via a serial 
                        ;  port and writes it to a file on the CP/M system. The file transfer uses
                        ;  the XMODEM protocol. 
                        ;
                        ;  Note this program is gutted from the Ward Christenson Modem program.
                        ;
                        ;  Hacked together by Mike Douglas for the Horizon Computer
                        ;  Updated by Glitch Works for the Alspa ACI-2
                        ;
                        ;  Glitch Works customization and cleanup is:
                        ;
                        ;  Copyright (c) 2019 The Glitch Works
                        ;  http://www.glitchwrks.com/
                        ;
                        ;  Glitch Works customizations are released under the GNU GPLv3.
                        ;
                        ;	Ver	Date	   Desc
                        ;   	---    --------    -----------------------------------------------
                        ;	1.0.1  2019-06-07  Customized for the Alspa ACI-2
                        ;
                        ;	1.0    10/7/15	   Initial version. This code is almost the same 
                        ;			   as the Vector Graphic version as both use the
                        ;			   same 8251 ports for serial I/O.
                        
                        ;  Serial Port Equates
                        
   0003                 CONCR	EQU	3		;Console port control register (port 2)
   0002                 CONDR	EQU	2		;Console port data register
   0005                 MODEMCR	EQU	5		;Modem port control register (port 4)
   0004                 MODEMDR	EQU	4		;Modem port data register
   0001                 PRINTCR	EQU	1		;Printer port control register (port 0)
   0000                 PRINTDR EQU	0		;Printer port data register
                        
   0001                 XMTMASK	EQU	1		;MASK TO ISOLATE XMIT READY BIT
   0001                 XMTRDY	EQU	1		;VALUE WHEN READY
   0002                 RCVMASK	EQU	2		;MASK TO ISOLATE RECEIVE READY BIT
   0002                 RCVRDY	EQU	2		;VALUE WHEN READY
                        
                        ;  Transfer related equates
                        
   0001                 SOH	EQU	1
   0004                 EOT	EQU	4
   0006                 ACK	EQU	6
   0015                 NAK	EQU	15H
   0003                 CTRLC	EQU	3		;Control-C
   000a                 LF	EQU	10
   000d                 CR	EQU	13
                        
   0100                 	ORG	100H
                        
                        ;  Verify a file name was specified
                        
   0100   3a 5d 00      	lda	PARAM1		;A=1st character of parameter 1
   0103   fe 20         	cpi	' '		;make sure file name present
   0105   c2 11 01      	jnz	haveFn		;yes, have a file name
   0108   11 a6 03      	lxi	d,mHelp		;display usage message
   010b   0e 09         	mvi	c,PRINT
   010d   cd 05 00      	call	BDOS
   0110   c9            	ret			;return to CPM
                        
                        ;  See if an alternate port was specified
                        
   0111   06 02         haveFn	mvi	b,CONDR		;assume port a used
   0113   11 0f 03      	lxi	d,mSendC	;port a send message
   0116   3a 6d 00      	lda	PARAM2		;A=1st character of parameter 2
   0119   e6 5f         	ani	5fh		;force upper case
   011b   fe 4d         	cpi	'M'		;Modem port specified?
   011d   ca 30 01      	jz	usePtM		;Yes, use it
   0120   fe 50         	cpi	'P'		;Printer port specified?
   0122   c2 65 01      	jnz	doXfer		;no, go do the transfer
   0125   06 00         	mvi	b,PRINTDR	;Use printer port
   0127   11 73 03      	lxi	d,mSendP	;Printer port send message
   012a   cd 50 01      	call	initP
   012d   c3 65 01      	jmp	doXfer
   0130   06 04         usePtM	mvi	b,MODEMDR	;use modem port
   0132   11 42 03      	lxi	d,mSendM	;Modem port send message
   0135   cd 3b 01      	call	initM		;Initialize MODEM port
   0138   c3 65 01      	jmp	doXfer
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;initM -- Initialize the MODEM port
                        ;
                        ;This routine ensures that the MODEM port is initialized
                        ;and in a sane state. Sets 8251A for x16 clock, 8N1
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   013b   3e 00         initM:	MVI	A,0
   013d   d3 05         	OUT	MODEMCR
   013f   d3 05         	OUT	MODEMCR
   0141   d3 05         	OUT	MODEMCR
   0143   3e 40         	MVI	A,40H
   0145   d3 05         	OUT	MODEMCR
   0147   3e 4e         	MVI	A,4EH
   0149   d3 05         	OUT	MODEMCR
   014b   3e 37         	MVI	A,37H
   014d   d3 05         	OUT	MODEMCR
   014f   c9            	RET
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;initP -- Initialize the PRINTER port
                        ;
                        ;This routine ensures that the PRINTER port is initialized
                        ;and in a sane state. Sets 8251A for x16 clock, 8N1
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   0150   3e 00         initP:	MVI	A,0
   0152   d3 01         	OUT	PRINTCR
   0154   d3 01         	OUT	PRINTCR
   0156   d3 01         	OUT	PRINTCR
   0158   3e 40         	MVI	A,40H
   015a   d3 01         	OUT	PRINTCR
   015c   3e 4e         	MVI	A,4EH
   015e   d3 01         	OUT	PRINTCR
   0160   3e 37         	MVI	A,37H
   0162   d3 01         	OUT	PRINTCR
   0164   c9            	RET
                        	
                        ;  doXfer - Switch to local stack and do the transfer.
                        
   0165   78            doXfer	mov	a,b		;a=address of serial port to use
   0166   32 f7 02      	sta	rcvSDR		;modify IN instruction for data register
   0169   32 0d 03      	sta	sndSDR		;modify OUT instruction for data register
   016c   3c            	inr	a		;a=serial port control register address
   016d   32 db 02      	sta	rcvSCR		;modify IN for control register in RECV
   0170   32 03 03      	sta	sndSCR		;modify IN for control register in SEND
   0173   21 00 00      	LXI	H,0		;HL=0
   0176   39            	DAD	SP		;HL=STACK FROM CP/M
   0177   22 0b 05      	SHLD	STACK		;..SAVE IT
   017a   31 0b 05      	LXI	SP,STACK	;SP=MY STACK
   017d   af            	xra	a
   017e   32 0e 05      	sta	SECTNO		;init sector number to zero
   0181   0e 09         	MVI	C,PRINT		;print the send message
   0183   cd 05 00      	CALL	BDOS		;PRINT ID MESSAGE
                        
                        ;  GOBBLE UP GARBAGE CHARS FROM THE LINE
                        
   0186   06 01         purge	MVI	B,1		;times out after 1 second if no data
   0188   cd d6 02      	CALL	RECV
   018b   da 96 01      	jc	RECEIVE$FILE	;line is clear, go receive the file
   018e   fe 03         	cpi	CTRLC		;exit if abort requested
   0190   ca ca 04      	jz	abort
   0193   c3 86 01      	jmp	purge
                        ;
                        ;**************RECEIVE FILE****************
                        ;
   0196                 RECEIVE$FILE:
   0196   cd 74 02      	CALL	ERASE$OLD$FILE
   0199   cd 87 02      	CALL	MAKE$NEW$FILE
   019c   3e 15         	MVI	A,NAK
   019e   cd ff 02      	CALL	SEND		;SEND NAK
                        
   01a1                 RECV$LOOP:
   01a1                 RECV$HDR:
   01a1   06 03         	MVI	B,3		;3 SEC TIMEOUT
   01a3   cd d6 02      	CALL	RECV
   01a6   d2 b9 01      	JNC	RHNTO		;NO TIMEOUT
                        
   01a9                 RECV$HDR$TIMEOUT:
   01a9                 RECV$SECT$ERR:			;PURGE THE LINE OF INPUT CHARS
   01a9   06 01         	MVI	B,1		;1 SEC W/NO CHARS
   01ab   cd d6 02      	CALL	RECV
   01ae   d2 a9 01      	JNC	RECV$SECT$ERR 	;LOOP UNTIL SENDER DONE
   01b1   3e 15         	MVI	A,NAK
   01b3   cd ff 02      	CALL	SEND		;SEND NAK
   01b6   c3 a1 01      	JMP	RECV$HDR
                        
                        ;GOT CHAR - MUST BE SOH OR CTRL-C TO ABORT
                        
   01b9   fe 01         RHNTO:	CPI	SOH
   01bb   ca cb 01      	JZ	GOT$SOH
   01be   fe 03         	cpi	CTRLC		;control-c to abort?
   01c0   ca ca 04      	jz	abort
   01c3   fe 04         	CPI	EOT
   01c5   ca 48 02      	JZ	GOT$EOT
   01c8   c3 a9 01      	JMP	RECV$SECT$ERR
                        
   01cb                 GOT$SOH:
   01cb   06 01         	MVI	B,1
   01cd   cd d6 02      	CALL	RECV
   01d0   da a9 01      	JC	RECV$HDR$TIMEOUT
   01d3   57            	MOV	D,A		;D=BLK #
   01d4   06 01         	MVI	B,1
   01d6   cd d6 02      	CALL	RECV		;GET CMA'D SECT #
   01d9   da a9 01      	JC	RECV$HDR$TIMEOUT
   01dc   2f            	CMA
   01dd   ba            	CMP	D		;GOOD SECTOR #?
   01de   ca e4 01      	JZ	RECV$SECTOR
   01e1   c3 a9 01      	JMP	RECV$SECT$ERR
                        
                        ;  Receive Sector
                        
   01e4                 RECV$SECTOR:
   01e4   7a            	MOV	A,D		;GET SECTOR #
   01e5   32 0d 05      	STA	RSECTNO
   01e8   0e 00         	MVI	C,0		;INIT CKSUM
   01ea   21 80 00      	LXI	H,80H		;POINT TO BUFFER
   01ed                 RECV$CHAR:
   01ed   06 01         	MVI	B,1		;1 SEC TIMEOUT
   01ef   cd d6 02      	CALL	RECV		;GET CHAR
   01f2   da a9 01      	JC	RECV$HDR$TIMEOUT
   01f5   77            	MOV	M,A		;STORE CHAR
   01f6   2c            	INR	L		;DONE?
   01f7   c2 ed 01      	JNZ	RECV$CHAR
                        
                        ;VERIFY CHECKSUM
                        
   01fa   51            	MOV	D,C		;SAVE CHECKSUM
   01fb   06 01         	MVI	B,1		;TIMEOUT
   01fd   cd d6 02      	CALL	RECV		;GET CHECKSUM
   0200   da a9 01      	JC	RECV$HDR$TIMEOUT
   0203   ba            	CMP	D		;CHECK
   0204   c2 a9 01      	JNZ	RECV$SECT$ERR
                        ;
                        ;GOT A SECTOR, WRITE IF = 1+PREV SECTOR
                        ;
   0207   3a 0d 05      	LDA	RSECTNO
   020a   47            	MOV	B,A		;SAVE IT
   020b   3a 0e 05      	LDA	SECTNO		;GET PREV
   020e   3c            	INR	A		;CALC NEXT SECTOR #
   020f   b8            	CMP	B		;MATCH?
   0210   c2 25 02      	JNZ	DO$ACK
                        
                        ;GOT NEW SECTOR - WRITE IT
                        
   0213   11 5c 00      	LXI	D,FCB
   0216   0e 15         	MVI	C,WRITE
   0218   cd 05 00      	CALL	BDOS
   021b   b7            	ORA	A
   021c   c2 2d 02      	JNZ	WRITE$ERROR
   021f   3a 0d 05      	LDA	RSECTNO
   0222   32 0e 05      	STA	SECTNO		;UPDATE SECTOR #
   0225   3e 06         DO$ACK	MVI	A,ACK
   0227   cd ff 02      	CALL	SEND
   022a   c3 a1 01      	JMP	RECV$LOOP
                        
   022d                 WRITE$ERROR:
   022d   cd cb 02      	CALL	ERXIT
   0230   0d 0a 0a 45   	DB	13,10,10,'Error Writing File',13,10,'$'
   0234   72 72 6f 72   
   0238   20 57 72 69   
   023c   74 69 6e 67   
   0240   20 46 69 6c   
   0244   65 0d 0a 24   
                        
   0248                 GOT$EOT:
   0248   3e 06         	MVI	A,ACK		;ACK THE EOT
   024a   cd ff 02      	CALL	SEND
   024d   11 5c 00      	LXI	D,FCB
   0250   0e 10         	MVI	C,CLOSE
   0252   cd 05 00      	CALL	BDOS
   0255   3c            	INR	A
   0256   c2 b0 04      	JNZ	XFER$CPLT
   0259   cd cb 02      	CALL	ERXIT
   025c   0d 0a 0a 45   	DB	13,10,10,'Error Closing File',13,10,'$'
   0260   72 72 6f 72   
   0264   20 43 6c 6f   
   0268   73 69 6e 67   
   026c   20 46 69 6c   
   0270   65 0d 0a 24   
                        ;
   0274                 ERASE$OLD$FILE:
   0274   11 5c 00      	LXI	D,FCB
   0277   0e 11         	MVI	C,SRCHF		;SEE IF IT EXISTS
   0279   cd 05 00      	CALL	BDOS
   027c   3c            	INR	A		;FOUND?
   027d   c8            	RZ			;NO, RETURN
   027e   11 5c 00      ERAY:	LXI	D,FCB
   0281   0e 13         	MVI	C,ERASE
   0283   cd 05 00      	CALL	BDOS
   0286   c9            	RET
                        ;
   0287                 MAKE$NEW$FILE:
   0287   11 5c 00      	LXI	D,FCB
   028a   0e 16         	MVI	C,MAKE
   028c   cd 05 00      	CALL	BDOS
   028f   3c            	INR	A		;FF=BAD
   0290   c0            	RNZ			;OPEN OK
                        
                        ;DIRECTORY FULL - CAN'T MAKE FILE
   0291   cd cb 02      	CALL	ERXIT
   0294   0d 0a 0a 45   	db	13,10,10,"Error - Can't Make File",13,10
   0298   72 72 6f 72   
   029c   20 2d 20 43   
   02a0   61 6e 27 74   
   02a4   20 4d 61 6b   
   02a8   65 20 46 69   
   02ac   6c 65 0d 0a   
   02b0   28 64 69 72   	db	"(directory must be full)",13,10,'$'
   02b4   65 63 74 6f   
   02b8   72 79 20 6d   
   02bc   75 73 74 20   
   02c0   62 65 20 66   
   02c4   75 6c 6c 29   
   02c8   0d 0a 24      
                        ;
                        ; S U B R O U T I N E S
                        ;
                        ; - - - - - - - - - - - - - - -
                        
                        ;EXIT PRINTING MESSAGE FOLLOWING 'CALL ERXIT'
                        
   02cb   d1            ERXIT	POP	D		;GET MESSAGE
   02cc   0e 09         	MVI	C,PRINT
   02ce   cd 05 00      	CALL	BDOS		;PRINT MESSAGE
   02d1   2a 0b 05      EXIT	LHLD	STACK		;GET ORIGINAL STACK
   02d4   f9            	SPHL			;RESTORE IT
   02d5   c9            	RET			;--EXIT-- TO CP/M
                        
                        ; - - - - - - - - - - - - - - -
                        ;MODEM RECV
                        ;-------------------------------------
   02d6   d5            RECV	PUSH	D		;SAVE
   02d7   11 3f 00      MSEC	lxi	d,63		;63 cycles, 4.032ms/wrap*248=1s (4MHz)
                        
   02db                 rcvSCR	equ	$+1		;address of I/O port for the following IN
   02da   db 03         MWTI	IN	CONCR		;(10)
   02dc   e6 02         	ANI	RCVMASK		;(7)
   02de   fe 02         	CPI	RCVRDY		;(7)
   02e0   ca f6 02      	JZ	MCHAR		;(10) GOT CHAR
                        
                        ; no character present, decrement timeout
                        
   02e3   fe 00         	cpi	0		;(7) waste some time
   02e5   fe 00         	cpi	0		;(7) waste some time
   02e7   1d            	DCR	E		;(5) COUNT DOWN
   02e8   c2 da 02      	JNZ	MWTI		;(10) FOR TIMEOUT
   02eb   15            	DCR	D		;do msb every 256th time
   02ec   c2 da 02      	JNZ	MWTI
   02ef   05            	DCR	B		;DCR # OF SECONDS
   02f0   c2 d7 02      	JNZ	MSEC
                        
                        ;MODEM TIMED OUT RECEIVING
                        
   02f3   d1            	POP	D		;RESTORE D,E
   02f4   37            	STC			;CARRY SHOWS TIMEOUT
   02f5   c9            	RET
                        
                        ;GOT MODEM CHAR
                        
   02f7                 rcvSDR	equ	$+1		;address of I/O port for the following IN
   02f6   db 02         MCHAR	IN	CONDR
   02f8   d1            	POP	D		;RESTORE DE
   02f9   f5            	PUSH	PSW		;CALC CHECKSUM
   02fa   81            	ADD	C
   02fb   4f            	MOV	C,A
   02fc   f1            	POP	PSW
   02fd   b7            	ORA	A		;TURN OFF CARRY TO SHOW NO TIMEOUT
   02fe   c9            	RET
                        
                        
                        ; - - - - - - - - - - - - - - -
                        ;MODEM SEND CHAR ROUTINE
                        ;----------------------------------
                        ;
   02ff   f5            SEND	PUSH	PSW		;CHECK IF MONITORING OUTPUT
   0300   81            	ADD	C		;CALC CKSUM
   0301   4f            	MOV	C,A
                        
   0303                 sndSCR	equ	$+1		;address of I/O port for the following IN
   0302   db 03         SENDW	IN	CONCR
   0304   e6 01         	ANI	XMTMASK
   0306   fe 01         	CPI	XMTRDY
   0308   c2 02 03      	JNZ	SENDW
   030b   f1            	POP	PSW		;GET CHAR
                        
   030d                 sndSDR	equ	$+1		;address of I/O port for the following IN
   030c   d3 02         	OUT	CONDR
   030e   c9            	RET
                        
                        ;-----------------------------------------
                        ;  messages
                        ;-----------------------------------------
                        
   030f   53 65 6e 64   mSendC	db	'Send file using XMODEM on CONSOLE port (port 2)...$'
   0313   20 66 69 6c   
   0317   65 20 75 73   
   031b   69 6e 67 20   
   031f   58 4d 4f 44   
   0323   45 4d 20 6f   
   0327   6e 20 43 4f   
   032b   4e 53 4f 4c   
   032f   45 20 70 6f   
   0333   72 74 20 28   
   0337   70 6f 72 74   
   033b   20 32 29 2e   
   033f   2e 2e 24      
   0342   53 65 6e 64   mSendM	db	'Send file using XMODEM on MODEM port (port 4)...$'
   0346   20 66 69 6c   
   034a   65 20 75 73   
   034e   69 6e 67 20   
   0352   58 4d 4f 44   
   0356   45 4d 20 6f   
   035a   6e 20 4d 4f   
   035e   44 45 4d 20   
   0362   70 6f 72 74   
   0366   20 28 70 6f   
   036a   72 74 20 34   
   036e   29 2e 2e 2e   
   0372   24            
   0373   53 65 6e 64   mSendP	db	'Send file using XMODEM on PRINTER port (port 0)...$'
   0377   20 66 69 6c   
   037b   65 20 75 73   
   037f   69 6e 67 20   
   0383   58 4d 4f 44   
   0387   45 4d 20 6f   
   038b   6e 20 50 52   
   038f   49 4e 54 45   
   0393   52 20 70 6f   
   0397   72 74 20 28   
   039b   70 6f 72 74   
   039f   20 30 29 2e   
   03a3   2e 2e 24      
   03a6   0d 0a 50 43   mHelp	db	CR,LF,'PCGET v1.0.1 for Alspa ACI-2',CR,LF,LF
   03aa   47 45 54 20   
   03ae   76 31 2e 30   
   03b2   2e 31 20 66   
   03b6   6f 72 20 41   
   03ba   6c 73 70 61   
   03be   20 41 43 49   
   03c2   2d 32 0d 0a   
   03c6   0a            
   03c7   52 65 63 65   	db	'Receives a file from a PC through a serial port',CR,LF
   03cb   69 76 65 73   
   03cf   20 61 20 66   
   03d3   69 6c 65 20   
   03d7   66 72 6f 6d   
   03db   20 61 20 50   
   03df   43 20 74 68   
   03e3   72 6f 75 67   
   03e7   68 20 61 20   
   03eb   73 65 72 69   
   03ef   61 6c 20 70   
   03f3   6f 72 74 0d   
   03f7   0a            
   03f8   75 73 69 6e   	db	'using the XMODEM protocol.',CR,LF,LF
   03fc   67 20 74 68   
   0400   65 20 58 4d   
   0404   4f 44 45 4d   
   0408   20 70 72 6f   
   040c   74 6f 63 6f   
   0410   6c 2e 0d 0a   
   0414   0a            
   0415   55 73 61 67   	db	'Usage: PCGET file.ext [MP]',CR,LF
   0419   65 3a 20 50   
   041d   43 47 45 54   
   0421   20 66 69 6c   
   0425   65 2e 65 78   
   0429   74 20 5b 4d   
   042d   50 5d 0d 0a   
   0431   20 20 20 43   	db	'   CONSOLE port (port 2) used by default',CR,LF
   0435   4f 4e 53 4f   
   0439   4c 45 20 70   
   043d   6f 72 74 20   
   0441   28 70 6f 72   
   0445   74 20 32 29   
   0449   20 75 73 65   
   044d   64 20 62 79   
   0451   20 64 65 66   
   0455   61 75 6c 74   
   0459   0d 0a         
   045b   20 20 20 53   	db	'   Specify M to use MODEM port (port 4)',CR,LF
   045f   70 65 63 69   
   0463   66 79 20 4d   
   0467   20 74 6f 20   
   046b   75 73 65 20   
   046f   4d 4f 44 45   
   0473   4d 20 70 6f   
   0477   72 74 20 28   
   047b   70 6f 72 74   
   047f   20 34 29 0d   
   0483   0a            
   0484   20 20 20 53   	db	'   Specify P to use PRINTER port (port 0)',CR,LF,'$'
   0488   70 65 63 69   
   048c   66 79 20 50   
   0490   20 74 6f 20   
   0494   75 73 65 20   
   0498   50 52 49 4e   
   049c   54 45 52 20   
   04a0   70 6f 72 74   
   04a4   20 28 70 6f   
   04a8   72 74 20 30   
   04ac   29 0d 0a 24   
                        
                        ;DONE - CLOSE UP SHOP
                        
   04b0                 XFER$CPLT:
   04b0   cd cb 02      	CALL	ERXIT
   04b3   0d 0a 0a 54   	DB	13,10,10,'Transfer Complete',13,10,'$'
   04b7   72 61 6e 73   
   04bb   66 65 72 20   
   04bf   43 6f 6d 70   
   04c3   6c 65 74 65   
   04c7   0d 0a 24      
                        
   04ca   cd cb 02      abort:	call	ERXIT
   04cd   0d 0a 0a 54   	db	13,10,10,'Transfer Aborted',13,10,'$'
   04d1   72 61 6e 73   
   04d5   66 65 72 20   
   04d9   41 62 6f 72   
   04dd   74 65 64 0d   
   04e1   0a 24         
                        
   04e3                 	DS	40	;STACK AREA
   050b                 STACK	DS	2	;STACK POINTER
   050d                 RSECTNO	DS	1	;RECEIVED SECTOR NUMBER
   050e                 SECTNO	DS	1	;CURRENT SECTOR NUMBER 
   050f                 serPort	ds	1	;I/O address of serial port to use
                        ;
                        ; BDOS EQUATES (VERSION 2)
                        ;
   0001                 RDCON	EQU	1
   0002                 WRCON	EQU	2
   0009                 PRINT	EQU	9
   000b                 CONST	EQU	11	;CONSOLE STAT
   000f                 OPEN	EQU	15	;0FFH=NOT FOUND
   0010                 CLOSE	EQU	16	;   "	"
   0011                 SRCHF	EQU	17	;   "	"
   0012                 SRCHN	EQU	18	;   "	"
   0013                 ERASE	EQU	19	;NO RET CODE
   0014                 READ	EQU	20	;0=OK, 1=EOF
   0015                 WRITE	EQU	21	;0=OK, 1=ERR, 2=?, 0FFH=NO DIR SPC
   0016                 MAKE	EQU	22	;0FFH=BAD
   0017                 REN	EQU	23	;0FFH=BAD
   001a                 STDMA	EQU	26
   0005                 BDOS	EQU	5
   0000                 REIPL	EQU	0
   005c                 FCB	EQU	5CH	;DEFAULT FCB
   005d                 PARAM1	EQU	FCB+1	;COMMAND LINE PARAMETER 1 IN FCB
   006d                 PARAM2	EQU	PARAM1+16	;COMMAND LINE PARAMETER 2
   0510                 	END
0006  ACK           0005  BDOS          0010  CLOSE         0003  CONCR     
0002  CONDR         000b  CONST         000d  CR            0003  CTRLC     
0225  DO$ACK        0004  EOT           0013  ERASE         0274  ERASE$OLD$FILE
027e  ERAY          02cb  ERXIT         02d1  EXIT          005c  FCB       
0248  GOT$EOT       01cb  GOT$SOH       000a  LF            0016  MAKE      
0287  MAKE$NEW$FILE    02f6  MCHAR         0005  MODEMCR       0004  MODEMDR   
02d7  MSEC          02da  MWTI          0015  NAK           000f  OPEN      
005d  PARAM1        006d  PARAM2        0009  PRINT         0001  PRINTCR   
0000  PRINTDR       0002  RCVMASK       0002  RCVRDY        0001  RDCON     
0014  READ          0196  RECEIVE$FILE    02d6  RECV          01ed  RECV$CHAR 
01a1  RECV$HDR      01a9  RECV$HDR$TIMEOUT    01a1  RECV$LOOP     01a9  RECV$SECT$ERR
01e4  RECV$SECTOR    0000  REIPL         0017  REN           01b9  RHNTO     
050d  RSECTNO       050e  SECTNO        02ff  SEND          0302  SENDW     
0001  SOH           0011  SRCHF         0012  SRCHN         050b  STACK     
001a  STDMA         0002  WRCON         0015  WRITE         022d  WRITE$ERROR
04b0  XFER$CPLT     0001  XMTMASK       0001  XMTRDY        04ca  abort     
0165  doXfer        0111  haveFn        013b  initM         0150  initP     
03a6  mHelp         030f  mSendC        0342  mSendM        0373  mSendP    
0186  purge         02db  rcvSCR        02f7  rcvSDR        050f  serPort   
0303  sndSCR        030d  sndSDR        0130  usePtM        
