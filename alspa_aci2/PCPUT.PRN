                        ;
                        ;  Alspa ACI-2 version, 4 MHz Z80
                        ;
                        ;  PCPUT - This CP/M program sends a file from a CP/M system to a PC
                        ;  via a serial The file transfer uses the XMODEM protocol. 
                        ;
                        ;  Note this program is gutted from the Ward Christenson Modem program.
                        ;
                        ;  Hacked together by Mike Douglas for the VG Bitstreamer II board
                        ;  Updated by Glitch Works for the Alspa ACI-2
                        ;
                        ;  Glitch Works customization and cleanup is:
                        ;
                        ;  Copyright (c) 2019 The Glitch Works
                        ;  http://www.glitchwrks.com/
                        ;
                        ;  Glitch Works customizations are released under the GNU GPLv3.
                        ;
                        ;	Ver	Date	   Desc
                        ;   	---    --------    -----------------------------------------------
                        ;	1.0.1  2019-06-07  Customized for the Alspa ACI-2
                        ;
                        ;	1.0    10/7/15	   Initial version. This code is almost the same 
                        ;			   as the Vector Graphic version as both use the
                        ;			   same 8251 ports for serial I/O.
                        
                        ;  Serial Port Equates
                        
   0003                 CONCR	EQU	3		;Console port control register (port 2)
   0002                 CONDR	EQU	2		;Console port data register
   0005                 MODEMCR	EQU	5		;Modem port control register (port 4)
   0004                 MODEMDR	EQU	4		;Modem port data register
   0001                 PRINTCR	EQU	1		;Printer port control register (port 0)
   0000                 PRINTDR EQU	0		;Printer port data register
                        
   0001                 XMTMASK	EQU	1		;MASK TO ISOLATE XMIT READY BIT
   0001                 XMTRDY	EQU	1		;VALUE WHEN READY
   0002                 RCVMASK	EQU	2		;MASK TO ISOLATE RECEIVE READY BIT
   0002                 RCVRDY	EQU	2		;VALUE WHEN READY
                        
   0005                 ERRLMT	EQU	5		;MAX ALLOWABLE ERRORS
                        
                        ;DEFINE ASCII CHARACTERS USED
                        
   0001                 SOH	EQU	1
   0004                 EOT	EQU	4
   0006                 ACK	EQU	6
   0015                 NAK	EQU	15H
   0003                 CTRLC	EQU	3		;Control-C
   000a                 LF	EQU	10
   000d                 CR	EQU	13
                        
   0100                 	org	100h
                        
                        ;  Verify a file name was specified
                        
   0100   3a 5d 00      	lda	PARAM1		;A=1st character of parameter 1
   0103   fe 20         	cpi	' '		;make sure file name present
   0105   c2 11 01      	jnz	haveFn		;yes, have a file name
   0108   11 01 04      	lxi	d,mHelp		;display usage message
   010b   0e 09         	mvi	c,PRINT
   010d   cd 05 00      	call	BDOS
   0110   c9            	ret			;return to CPM
                        
                        ;  See if an alternate port was specified
                        
   0111   06 02         haveFn	mvi	b,CONDR		;assume CONSOLE port used
   0113   11 55 03      	lxi	d,mRcvC		;Console port send message
   0116   3a 6d 00      	lda	PARAM2		;A=1st character of parameter 2
   0119   e6 5f         	ani	5fh		;force upper case
   011b   fe 4d         	cpi	'M'		;Modem port specified?
   011d   ca 30 01      	jz	usePtM		;Yes, use it
   0120   fe 50         	cpi	'P'		;Printer port specified?
   0122   c2 65 01      	jnz	doXfer		;no, go do the transfer
   0125   06 00         	mvi	b,PRINTDR	;Use printer port
   0127   11 c7 03      	lxi	d,mRcvP		;Printer port send message
   012a   cd 50 01      	call	initP
   012d   c3 65 01      	jmp	doXfer
   0130   06 04         usePtM	mvi	b,MODEMDR	;use modem port
   0132   11 8f 03      	lxi	d,mRcvM		;Modem port send message
   0135   cd 3b 01      	call	initM		;Initialize MODEM port
   0138   c3 65 01      	jmp	doXfer
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;initM -- Initialize the MODEM port
                        ;
                        ;This routine ensures that the MODEM port is initialized
                        ;and in a sane state. Sets 8251A for x16 clock, 8N1
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   013b   3e 00         initM:	MVI	A,0
   013d   d3 05         	OUT	MODEMCR
   013f   d3 05         	OUT	MODEMCR
   0141   d3 05         	OUT	MODEMCR
   0143   3e 40         	MVI	A,40H
   0145   d3 05         	OUT	MODEMCR
   0147   3e 4e         	MVI	A,4EH
   0149   d3 05         	OUT	MODEMCR
   014b   3e 37         	MVI	A,37H
   014d   d3 05         	OUT	MODEMCR
   014f   c9            	RET
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;initP -- Initialize the PRINTER port
                        ;
                        ;This routine ensures that the PRINTER port is initialized
                        ;and in a sane state. Sets 8251A for x16 clock, 8N1
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   0150   3e 00         initP:	MVI	A,0
   0152   d3 01         	OUT	PRINTCR
   0154   d3 01         	OUT	PRINTCR
   0156   d3 01         	OUT	PRINTCR
   0158   3e 40         	MVI	A,40H
   015a   d3 01         	OUT	PRINTCR
   015c   3e 4e         	MVI	A,4EH
   015e   d3 01         	OUT	PRINTCR
   0160   3e 37         	MVI	A,37H
   0162   d3 01         	OUT	PRINTCR
   0164   c9            	RET
                        
                        ;  doXfer - Switch to local stack and do the transfer
                        
   0165   78            doXfer	mov	a,b		;a=address of serial port to use
   0166   32 66 02      	sta	rcvSDR		;modify IN instruction for data register
   0169   32 7c 02      	sta	sndSDR		;modify OUT instruction for data register
   016c   3c            	inr	a		;a=serial port control register address
   016d   32 4a 02      	sta	rcvSCR		;modify IN for control register in RECV
   0170   32 72 02      	sta	sndSCR		;modify IN for control register in SEND
   0173   21 00 00      	LXI	H,0		;HL=0
   0176   39            	DAD	SP		;HL=STACK FROM CP/M
   0177   22 32 05      	SHLD	STACK		;..SAVE IT
   017a   31 32 05      	LXI	SP,STACK	;SP=MY STACK
   017d   af            	xra	a		
   017e   32 34 05      	sta	SECTNO		;initialize sector number to zero
   0181   d5            	PUSH	D		;Save message string pointer
   0182   cd 19 02      	CALL	OPEN$FILE	;OPEN THE FILE
   0185   d1            	POP	D		;Restore message string pointer
   0186   0e 09         	MVI	C,PRINT
   0188   cd 05 00      	CALL	BDOS		;PRINT ID MESSAGE
                        
                        ;  GOBBLE UP GARBAGE CHARS FROM THE LINE
                        
   018b   06 01         purge	MVI	B,1		;times out after 1 second if no data
   018d   cd 45 02      	CALL	RECV
   0190   da 9b 01      	jc	lineClr		;line is clear, go wait for initial NAK
   0193   fe 03         	cpi	CTRLC		;exit if abort requested
   0195   ca 1c 03      	jz	abort
   0198   c3 8b 01      	jmp	purge
                        
                        ; WAIT FOR INITIAL NAK, THEN SEND THE FILE
                        	
   019b   af            lineClr	xra	a		;clear crc flag = checksum mode
   019c   32 36 05      	sta	crcFlag
   019f   06 01         WAITNAK	MVI	B,1		;TIMEOUT DELAY
   01a1   cd 45 02      	CALL	RECV
   01a4   da 9f 01      	JC	WAITNAK
   01a7   fe 03         	cpi	CTRLC		;abort requested?
   01a9   ca 1c 03      	jz	abort
   01ac   fe 15         	CPI	NAK		;NAK RECEIVED?
   01ae   ca b9 01      	jz	SENDB		;yes, send file in checksum mode
   01b1   fe 43         	cpi	'C'		;'C' for CRC mode received?
   01b3   c2 9f 01      	JNZ	WAITNAK		;no, keep waiting
   01b6   32 36 05      	sta	crcFlag		;set CRC flag non-zero = true
                        				;fall through to start the send operation
                        ;
                        ;*****************SEND A FILE***************
                        ;
                        
                        ;READ SECTOR, SEND IT
                        
   01b9   cd 7e 02      SENDB	CALL	READ$SECTOR
   01bc   3a 34 05      	LDA	SECTNO		;INCR SECT NO.
   01bf   3c            	INR	A
   01c0   32 34 05      	STA	SECTNO
                        
                        ;SEND OR REPEAT SECTOR
                        
   01c3   3e 01         REPTB	MVI	A,SOH
   01c5   cd 6e 02      	CALL	SEND
   01c8   3a 34 05      	LDA	SECTNO
   01cb   cd 6e 02      	CALL	SEND
   01ce   3a 34 05      	LDA	SECTNO
   01d1   2f            	CMA
   01d2   cd 6e 02      	CALL	SEND
   01d5   21 00 00      	lxi	h,0		;init crc to zero
   01d8   22 37 05      	shld	crc16
   01db   4c            	mov	c,h		;init checksum in c to zero
   01dc   21 80 00      	LXI	H,80H
   01df   7e            SENDC	MOV	A,M
   01e0   cd 6e 02      	CALL	SEND
   01e3   cd 35 03      	call	calCrc		;update CRC
   01e6   23            	INX	H
   01e7   7c            	MOV	A,H
   01e8   fe 01         	CPI	1		;DONE WITH SECTOR?
   01ea   c2 df 01      	JNZ	SENDC
                        
                        ; Send checksum or CRC based on crcFlag
                        
   01ed   3a 36 05      	lda	crcFlag		;crc or checksum?
   01f0   b7            	ora	a
   01f1   ca 00 02      	jz	sndCsum		;flag clear = checksum
   01f4   3a 38 05      	lda	crc16+1		;a=high byte of CRC
   01f7   cd 6e 02      	call	SEND		;send it
   01fa   3a 37 05      	lda	crc16		;a=low byte of crc
   01fd   c3 01 02      	jmp	sndSkip		;skip next instruction	
   0200   79            sndCsum	mov	a,c		;send the checksum byte
   0201   cd 6e 02      sndSkip	call	SEND
                        
                        ;GET ACK ON SECTOR
                        
   0204   06 04         	MVI	B,4		;WAIT 4 SECONDS MAX
   0206   cd 45 02      	CALL	RECV
   0209   da c3 01      	JC	REPTB		;TIMEOUT, SEND AGAIN
                        
                        ;NO TIMEOUT SENDING SECTOR
                        
   020c   fe 06         	CPI	ACK		;ACK RECIEVED?
   020e   ca b9 01      	JZ	SENDB		;..YES, SEND NEXT SECT
   0211   fe 03         	cpi	CTRLC		;control-c to abort?
   0213   ca 1c 03      	jz	abort
   0216   c3 c3 01      	JMP	REPTB		;PROBABLY NAK - TRY AGAIN
                        ;
                        ;
                        ; S U B R O U T I N E S
                        ;
                        ;OPEN FILE
   0219   11 5c 00      OPEN$FILE LXI	D,FCB
   021c   0e 0f         	MVI	C,OPEN
   021e   cd 05 00      	CALL	BDOS
   0221   3c            	INR	A		;OPEN OK?
   0222   c0            	RNZ			;GOOD OPEN
   0223   cd 3a 02      	CALL	ERXIT
   0226   0d 0a 43 61   	DB	13,10,"Can't Open File",13,10,'$'
   022a   6e 27 74 20   
   022e   4f 70 65 6e   
   0232   20 46 69 6c   
   0236   65 0d 0a 24   
                        
                        ; - - - - - - - - - - - - - - -
                        ;EXIT PRINTING MESSAGE FOLLOWING 'CALL ERXIT'
   023a   d1            ERXIT	POP	D		;GET MESSAGE
   023b   0e 09         	MVI	C,PRINT
   023d   cd 05 00      	CALL	BDOS		;PRINT MESSAGE
   0240   2a 32 05      EXIT	LHLD	STACK		;GET ORIGINAL STACK
   0243   f9            	SPHL			;RESTORE IT
   0244   c9            	RET			;--EXIT-- TO CP/M
                        
                        ; - - - - - - - - - - - - - - -
                        ;MODEM RECV
                        ;-------------------------------------
   0245   d5            RECV	PUSH	D		;SAVE
   0246   11 3f 00      MSEC	lxi	d,63		;63 cycles, 4.032ms/wrap*248=1s (4MHz)
                        
   024a                 rcvSCR	equ	$+1		;address of I/O port for the following IN
   0249   db 03         MWTI	IN	CONCR		;(10)
   024b   e6 02         	ANI	RCVMASK		;(7)
   024d   fe 02         	CPI	RCVRDY		;(7)
   024f   ca 65 02      	JZ	MCHAR		;(10) GOT CHAR
                        
                        ; no character present, decrement timeout
                        
   0252   fe 00         	cpi	0		;(7) waste some time
   0254   fe 00         	cpi	0		;(7) waste some time
   0256   1d            	DCR	E		;(5) COUNT DOWN
   0257   c2 49 02      	JNZ	MWTI		;(10) FOR TIMEOUT
   025a   15            	DCR	D		;do msb every 256th time
   025b   c2 49 02      	JNZ	MWTI
   025e   05            	DCR	B		;DCR # OF SECONDS
   025f   c2 46 02      	JNZ	MSEC
                        
                        ;MODEM TIMED OUT RECEIVING
                        
   0262   d1            	POP	D		;RESTORE D,E
   0263   37            	STC			;CARRY SHOWS TIMEOUT
   0264   c9            	RET
                        
                        ;GOT MODEM CHAR
                        
   0266                 rcvSDR	equ	$+1		;address of I/O port for the following IN
   0265   db 02         MCHAR	IN	CONDR
   0267   d1            	POP	D		;RESTORE DE
   0268   f5            	PUSH	PSW		;CALC CHECKSUM
   0269   81            	ADD	C
   026a   4f            	MOV	C,A
   026b   f1            	POP	PSW
   026c   b7            	ORA	A		;TURN OFF CARRY TO SHOW NO TIMEOUT
   026d   c9            	RET
                        
                        ; - - - - - - - - - - - - - - -
                        ;MODEM SEND CHAR ROUTINE
                        ;----------------------------------
                        ;
   026e   f5            SEND	PUSH	PSW		;CHECK IF MONITORING OUTPUT
   026f   81            	ADD	C		;CALC CKSUM
   0270   4f            	MOV	C,A
                        
   0272                 sndSCR	equ	$+1		;address of I/O port for the following IN
   0271   db 03         SENDW	IN	CONCR
   0273   e6 01         	ANI	XMTMASK
   0275   fe 01         	CPI	XMTRDY
   0277   c2 71 02      	JNZ	SENDW
   027a   f1            	POP	PSW		;GET CHAR
                        
   027c                 sndSDR	equ	$+1		;address of I/O port for the following IN
   027b   d3 02         	OUT	CONDR
   027d   c9            	RET
                        
                        ;
                        ;FILE READ ROUTINE
                        ;
   027e                 READ$SECTOR:
   027e   11 5c 00      	LXI	D,FCB
   0281   0e 14         	MVI	C,READ
   0283   cd 05 00      	CALL	BDOS
   0286   b7            	ORA	A
   0287   c8            	RZ
   0288   3d            	DCR	A		;EOF?
   0289   c2 eb 02      	JNZ	RDERR
                        
                        ;EOF
                        
   028c   af            	XRA	A
   028d   32 35 05      	STA	ERRCT
   0290   3e 04         SEOT	MVI	A,EOT
   0292   cd 6e 02      	CALL	SEND
   0295   06 03         	MVI	B,3		;WAIT 3 SEC FOR TIMEOUT
   0297   cd 45 02      	CALL	RECV
   029a   da e8 02      	JC	EOTTOT		;EOT TIMEOUT
   029d   fe 06         	CPI	ACK
   029f   ca 02 03      	JZ	XFER$CPLT
                        
                        ;ACK NOT RECIEVED
                        
   02a2   3a 35 05      EOTERR	LDA	ERRCT
   02a5   3c            	INR	A
   02a6   32 35 05      	STA	ERRCT
   02a9   fe 05         	CPI	ERRLMT
   02ab   da 90 02      	JC	SEOT
   02ae   cd 3a 02      	CALL	ERXIT
   02b1   0d 0a 0a      	db	13,10,10
   02b4   4e 6f 20 41   	db	'No ACK received on EOT, but transfer is complete.',13,10,'$'
   02b8   43 4b 20 72   
   02bc   65 63 65 69   
   02c0   76 65 64 20   
   02c4   6f 6e 20 45   
   02c8   4f 54 2c 20   
   02cc   62 75 74 20   
   02d0   74 72 61 6e   
   02d4   73 66 65 72   
   02d8   20 69 73 20   
   02dc   63 6f 6d 70   
   02e0   6c 65 74 65   
   02e4   2e 0d 0a 24   
                        
                        ;
                        ;TIMEOUT ON EOT
                        ;
   02e8   c3 a2 02      EOTTOT	JMP	EOTERR
                        ;
                        ;READ ERROR
                        ;
   02eb   cd 3a 02      RDERR	CALL	ERXIT
   02ee   0d 0a 46 69   	DB	13,10,'File Read Error',13,10,'$'
   02f2   6c 65 20 52   
   02f6   65 61 64 20   
   02fa   45 72 72 6f   
   02fe   72 0d 0a 24   
                        
                        ;DONE - CLOSE UP SHOP
                        
   0302                 XFER$CPLT:
   0302   cd 3a 02      	CALL	ERXIT
   0305   0d 0a 0a 54   	DB	13,10,10,'Transfer Complete',13,10,'$'
   0309   72 61 6e 73   
   030d   66 65 72 20   
   0311   43 6f 6d 70   
   0315   6c 65 74 65   
   0319   0d 0a 24      
                        
   031c   cd 3a 02      abort	call	ERXIT
   031f   0d 0a 0a 54   	DB	13,10,10,'Transfer Aborted',13,10,'$'
   0323   72 61 6e 73   
   0327   66 65 72 20   
   032b   41 62 6f 72   
   032f   74 65 64 0d   
   0333   0a 24         
                        
                        ;-----------------------------------------------------------------------------
                        ; calCrc - update the 16-bit CRC with one more byte. 
                        ;    (Copied from M. Eberhard)
                        ; On Entry:
                        ;   a has the new byte
                        ;   crc16 is current except this byte
                        ; On Exit:
                        ;   crc16 has been updated
                        ;   Trashes a,de
                        ;-----------------------------------------------------------------------------
   0335   c5            calCrc	push	b		;save bc, hl
   0336   e5            	push	h
   0337   2a 37 05      	lhld	crc16		;get CRC so far
   033a   ac            	xra	h		;XOR into CRC top byte
   033b   67            	mov	h,a
   033c   01 21 10      	lxi	b,1021h		;bc=CRC16 polynomial
   033f   16 08         	mvi	d,8		;prepare to rotate 8 bits
                        
                        ; do 8 bit shift/divide by CRC polynomial
                        
   0341   29            cRotLp	dad	h		;16-bit shift
   0342   d2 4b 03      	jnc	cClr		;skip if bit 15 was 0
   0345   7c            	mov	a,h		;CRC=CRC xor 1021H
   0346   a8            	xra	b
   0347   67            	mov	h,a
   0348   7d            	mov	a,l
   0349   a9            	xra	c
   034a   6f            	mov	l,a
   034b   15            cClr	dcr	d
   034c   c2 41 03      	jnz	cRotLp		;rotate 8 times
                        
                        ; save the updated CRC and exit
                        
   034f   22 37 05      	shld	crc16		;save updated CRC
   0352   e1            	pop	h		;restore hl, bc
   0353   c1            	pop	b
   0354   c9            	ret
                        
                        ;-----------------------------------------
                        ;  messages
                        ;-----------------------------------------
                        
   0355   53 74 61 72   mRcvC	db	'Start XMODEM file receive on CONSOLE port (port 2) now...$'
   0359   74 20 58 4d   
   035d   4f 44 45 4d   
   0361   20 66 69 6c   
   0365   65 20 72 65   
   0369   63 65 69 76   
   036d   65 20 6f 6e   
   0371   20 43 4f 4e   
   0375   53 4f 4c 45   
   0379   20 70 6f 72   
   037d   74 20 28 70   
   0381   6f 72 74 20   
   0385   32 29 20 6e   
   0389   6f 77 2e 2e   
   038d   2e 24         
   038f   53 74 61 72   mRcvM	db	'Start XMODEM file receive on MODEM port (port 4) now...$'
   0393   74 20 58 4d   
   0397   4f 44 45 4d   
   039b   20 66 69 6c   
   039f   65 20 72 65   
   03a3   63 65 69 76   
   03a7   65 20 6f 6e   
   03ab   20 4d 4f 44   
   03af   45 4d 20 70   
   03b3   6f 72 74 20   
   03b7   28 70 6f 72   
   03bb   74 20 34 29   
   03bf   20 6e 6f 77   
   03c3   2e 2e 2e 24   
   03c7   53 74 61 72   mRcvP	db	'Start XMODEM file receive on PRINTER port (port 0) now...$'
   03cb   74 20 58 4d   
   03cf   4f 44 45 4d   
   03d3   20 66 69 6c   
   03d7   65 20 72 65   
   03db   63 65 69 76   
   03df   65 20 6f 6e   
   03e3   20 50 52 49   
   03e7   4e 54 45 52   
   03eb   20 70 6f 72   
   03ef   74 20 28 70   
   03f3   6f 72 74 20   
   03f7   30 29 20 6e   
   03fb   6f 77 2e 2e   
   03ff   2e 24         
   0401   0d 0a 50 43   mHelp	db	CR,LF,'PCPUT v1.0.1 for Alspa ACI-2',CR,LF,LF
   0405   50 55 54 20   
   0409   76 31 2e 30   
   040d   2e 31 20 66   
   0411   6f 72 20 41   
   0415   6c 73 70 61   
   0419   20 41 43 49   
   041d   2d 32 0d 0a   
   0421   0a            
   0422   54 72 61 6e   	db	'Transmits a file to a PC through a serial port',CR,LF
   0426   73 6d 69 74   
   042a   73 20 61 20   
   042e   66 69 6c 65   
   0432   20 74 6f 20   
   0436   61 20 50 43   
   043a   20 74 68 72   
   043e   6f 75 67 68   
   0442   20 61 20 73   
   0446   65 72 69 61   
   044a   6c 20 70 6f   
   044e   72 74 0d 0a   
   0452   75 73 69 6e   	db	'using the XMODEM protocol.',CR,LF,LF
   0456   67 20 74 68   
   045a   65 20 58 4d   
   045e   4f 44 45 4d   
   0462   20 70 72 6f   
   0466   74 6f 63 6f   
   046a   6c 2e 0d 0a   
   046e   0a            
   046f   55 73 61 67   	db	'Usage: PCPUT file.ext [MP]',CR,LF
   0473   65 3a 20 50   
   0477   43 50 55 54   
   047b   20 66 69 6c   
   047f   65 2e 65 78   
   0483   74 20 5b 4d   
   0487   50 5d 0d 0a   
   048b   20 20 20 43   	db	'   CONSOLE port (port 2) used by default',CR,LF
   048f   4f 4e 53 4f   
   0493   4c 45 20 70   
   0497   6f 72 74 20   
   049b   28 70 6f 72   
   049f   74 20 32 29   
   04a3   20 75 73 65   
   04a7   64 20 62 79   
   04ab   20 64 65 66   
   04af   61 75 6c 74   
   04b3   0d 0a         
   04b5   20 20 20 53   	db	'   Specify M to use MODEM port (port 4)',CR,LF
   04b9   70 65 63 69   
   04bd   66 79 20 4d   
   04c1   20 74 6f 20   
   04c5   75 73 65 20   
   04c9   4d 4f 44 45   
   04cd   4d 20 70 6f   
   04d1   72 74 20 28   
   04d5   70 6f 72 74   
   04d9   20 34 29 0d   
   04dd   0a            
   04de   20 20 20 53   	db	'   Specify P to use PRINTER port (port 0)',CR,LF,'$'
   04e2   70 65 63 69   
   04e6   66 79 20 50   
   04ea   20 74 6f 20   
   04ee   75 73 65 20   
   04f2   50 52 49 4e   
   04f6   54 45 52 20   
   04fa   70 6f 72 74   
   04fe   20 28 70 6f   
   0502   72 74 20 30   
   0506   29 0d 0a 24   
                        
                        ; Data Area
                        
   050a                 	DS	40	;STACK AREA
   0532                 STACK	DS	2	;STACK POINTER
   0534                 SECTNO	DS	1	;CURRENT SECTOR NUMBER 
   0535                 ERRCT	DS	1	;ERROR COUNT
   0536                 crcFlag	ds	1	;non-zero if using CRC
   0537                 crc16	ds	2	;computed crc
                        
                        ;
                        ; BDOS EQUATES (VERSION 2)
                        ;
   0001                 RDCON	EQU	1
   0002                 WRCON	EQU	2
   0009                 PRINT	EQU	9
   000b                 CONST	EQU	11	;CONSOLE STAT
   000f                 OPEN	EQU	15	;0FFH=NOT FOUND
   0010                 CLOSE	EQU	16	;   "	"
   0011                 SRCHF	EQU	17	;   "	"
   0012                 SRCHN	EQU	18	;   "	"
   0013                 ERASE	EQU	19	;NO RET CODE
   0014                 READ	EQU	20	;0=OK, 1=EOF
   0015                 WRITE	EQU	21	;0=OK, 1=ERR, 2=?, 0FFH=NO DIR SPC
   0016                 MAKE	EQU	22	;0FFH=BAD
   0017                 REN	EQU	23	;0FFH=BAD
   001a                 STDMA	EQU	26
   0005                 BDOS	EQU	5
   0000                 REIPL	EQU	0
   005c                 FCB	EQU	5CH	;SYSTEM FCB
   005d                 PARAM1	EQU	FCB+1	;COMMAND LINE PARAMETER 1 IN FCB
   006d                 PARAM2	EQU	PARAM1+16	;COMMAND LINE PARAMETER 2
   0539                 	END
0006  ACK           0005  BDOS          0010  CLOSE         0003  CONCR     
0002  CONDR         000b  CONST         000d  CR            0003  CTRLC     
0004  EOT           02a2  EOTERR        02e8  EOTTOT        0013  ERASE     
0535  ERRCT         0005  ERRLMT        023a  ERXIT         0240  EXIT      
005c  FCB           000a  LF            0016  MAKE          0265  MCHAR     
0005  MODEMCR       0004  MODEMDR       0246  MSEC          0249  MWTI      
0015  NAK           000f  OPEN          0219  OPEN$FILE     005d  PARAM1    
006d  PARAM2        0009  PRINT         0001  PRINTCR       0000  PRINTDR   
0002  RCVMASK       0002  RCVRDY        0001  RDCON         02eb  RDERR     
0014  READ          027e  READ$SECTOR    0245  RECV          0000  REIPL     
0017  REN           01c3  REPTB         0534  SECTNO        026e  SEND      
01b9  SENDB         01df  SENDC         0271  SENDW         0290  SEOT      
0001  SOH           0011  SRCHF         0012  SRCHN         0532  STACK     
001a  STDMA         019f  WAITNAK       0002  WRCON         0015  WRITE     
0302  XFER$CPLT     0001  XMTMASK       0001  XMTRDY        031c  abort     
034b  cClr          0341  cRotLp        0335  calCrc        0537  crc16     
0536  crcFlag       0165  doXfer        0111  haveFn        013b  initM     
0150  initP         019b  lineClr       0401  mHelp         0355  mRcvC     
038f  mRcvM         03c7  mRcvP         018b  purge         024a  rcvSCR    
0266  rcvSDR        0200  sndCsum       0272  sndSCR        027c  sndSDR    
0201  sndSkip       0130  usePtM        
